// Prisma schema updated to match current application models

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(ATTENDEE)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventRegistrations EventRegistration[]
  organizedEvents    Event[]          @relation("OrganizedEvents")
  pollResponses      PollResponse[]
  feedbacks          Feedback[]
  certificates       Certificate[]
  certificateTemplates CertificateTemplate[]
  helpfulVotes       HelpfulVote[]
  questionVotes      QuestionVote[]

  @@map("users")
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?
  slug        String      @unique
  startDate   DateTime
  endDate     DateTime?
  location    String?
  isPublic    Boolean     @default(true)
  isActive    Boolean     @default(false)
  branding    Json?
  program     String?
  qrCode      String?
  maxAttendees Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  organizerId String
  organizer   User        @relation("OrganizedEvents", fields: [organizerId], references: [id])
  panels      Panel[]
  registrations   EventRegistration[]
  questions   Question[]
  polls       Poll[]
  certificates    Certificate[]
  feedbacks       Feedback[]
  certificateTemplates CertificateTemplate[]

  @@map("events")
}

model Panel {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  speaker     String?
  location    String?
  order       Int       @default(0)
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  eventId String
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  questions Question[]
  polls     Poll[]

  @@map("panels")
}

model EventRegistration {
  id         String   @id @default(cuid())
  email      String?
  firstName  String?
  lastName   String?
  phone      String?
  company    String?
  position   String?
  experience String?
  expectations String?
  dietaryRestrictions String?
  consent    Boolean  @default(false)
  isPublic   Boolean  @default(true)
  attended   Boolean  @default(false)
  createdAt  DateTime @default(now())

  userId  String?
  user    User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  eventId String
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_registrations")
}

model Question {
  id        String   @id @default(cuid())
  content   String
  status    QuestionStatus @default(PENDING)
  authorName  String
  authorEmail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId String?
  event   Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  panelId String
  panel   Panel @relation(fields: [panelId], references: [id], onDelete: Cascade)
  votes   QuestionVote[]

  @@map("questions")
}

model QuestionVote {
  questionId String
  userId     String
  type       VoteType
  createdAt  DateTime @default(now())

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([questionId, userId])
  @@map("question_votes")
}

enum VoteType {
  UP
  DOWN
}

model Poll {
  id          String   @id @default(cuid())
  question    String
  description String?
  isActive    Boolean  @default(false)
  isAnonymous Boolean  @default(false)
  allowMultipleVotes Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  eventId String?
  event   Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  panelId String
  panel   Panel @relation(fields: [panelId], references: [id], onDelete: Cascade)
  options PollOption[]
  responses PollResponse[]

  @@map("polls")
}

model PollOption {
  id     String @id @default(cuid())
  text   String
  order  Int    @default(0)

  pollId String
  poll   Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  responses PollResponse[]

  @@map("poll_options")
}

model PollResponse {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pollId   String
  poll     Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  optionId String
  option   PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([userId, pollId, optionId])
  @@map("poll_responses")
}

model CertificateTemplate {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  autoGenerate Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  eventId String
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId  String?
  user    User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  certificates Certificate[]

  @@map("certificate_templates")
}

model Certificate {
  id           String   @id @default(cuid())
  content      String
  issuedAt     DateTime @default(now())
  certificateUrl String
  qrCodeUrl    String
  verifiedAt   DateTime?

  templateId String
  template   CertificateTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([templateId, userId])
  @@map("certificates")
}

model Feedback {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  category   String
  resolved   Boolean @default(false)
  createdAt  DateTime @default(now())

  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  helpfulVotes HelpfulVote[]

  @@unique([userId, eventId])
  @@map("feedbacks")
}

model HelpfulVote {
  feedbackId String
  userId     String
  createdAt  DateTime @default(now())

  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([feedbackId, userId])
  @@map("helpful_votes")
}

enum UserRole {
  ADMIN
  ORGANIZER
  ATTENDEE
}

enum QuestionStatus {
  PENDING
  APPROVED
  REJECTED
}
