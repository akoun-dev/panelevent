// Script de test pour v√©rifier la fonctionnalit√© multilingue
import { createClient } from '@supabase/supabase-js'
import { randomUUID } from 'crypto'

// Charger les variables d'environnement
import { config } from 'dotenv'
config({ path: '../.env' })

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  console.log('NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL)
  console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'pr√©sent' : 'manquant')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testMultilingualFunctionality() {
  console.log('üß™ Test de la fonctionnalit√© multilingue...')
  
  try {
    // R√©cup√©rer un organisateur existant
    const { data: organizers, error: orgError } = await supabase
      .from('users')
      .select('id')
      .eq('role', 'ORGANIZER')
      .limit(1)

    if (orgError || !organizers || organizers.length === 0) {
      console.error('‚ùå Aucun organisateur trouv√©:', orgError)
      return
    }

    const organizerId = organizers[0].id
    console.log('üë§ Organisateur trouv√©:', organizerId)

    // 1. Cr√©er un √©v√©nement de test avec des traductions
    const testEventData = {
      id: randomUUID(),
      title: 'Test Event FR',
      description: 'Description en fran√ßais',
      slug: 'test-multilingual-' + Date.now(),
      startDate: new Date().toISOString(),
      endDate: new Date(Date.now() + 86400000).toISOString(),
      location: 'Paris, France',
      isPublic: true,
      isActive: true,
      maxAttendees: 100,
      title_translations: {
        fr: 'Test Event FR',
        en: 'Test Event EN',
        pt: 'Test Event PT',
        es: 'Test Event ES',
        ar: 'Test Event AR'
      },
      description_translations: {
        fr: 'Description en fran√ßais',
        en: 'Description in English',
        pt: 'Descri√ß√£o em portugu√™s',
        es: 'Descripci√≥n en espa√±ol',
        ar: 'ŸàÿµŸÅ ÿ®ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'
      },
      location_translations: {
        fr: 'Paris, France',
        en: 'Paris, France',
        pt: 'Paris, Fran√ßa',
        es: 'Par√≠s, Francia',
        ar: 'ÿ®ÿßÿ±Ÿäÿ≥ÿå ŸÅÿ±ŸÜÿ≥ÿß'
      },
      organizerId: organizerId
    }

    console.log('üìù Cr√©ation d\'un √©v√©nement de test...')
    const { data: createdEvent, error: createError } = await supabase
      .from('events')
      .insert(testEventData)
      .select()
      .single()

    if (createError) {
      console.error('‚ùå Erreur lors de la cr√©ation:', createError)
      return
    }

    console.log('‚úÖ √âv√©nement cr√©√© avec succ√®s:', createdEvent.id)

    // 2. R√©cup√©rer l'√©v√©nement pour v√©rifier les traductions
    console.log('üìñ R√©cup√©ration de l\'√©v√©nement...')
    const { data: retrievedEvent, error: retrieveError } = await supabase
      .from('events')
      .select('*')
      .eq('id', createdEvent.id)
      .single()

    if (retrieveError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration:', retrieveError)
      return
    }

    console.log('‚úÖ √âv√©nement r√©cup√©r√© avec succ√®s')
    console.log('üìä Donn√©es multilingues r√©cup√©r√©es:')
    console.log('- Title translations:', retrievedEvent.title_translations)
    console.log('- Description translations:', retrievedEvent.description_translations)
    console.log('- Location translations:', retrievedEvent.location_translations)

    // 3. V√©rifier que les donn√©es sont correctes
    const translationsValid = 
      retrievedEvent.title_translations &&
      retrievedEvent.description_translations &&
      retrievedEvent.location_translations &&
      retrievedEvent.title_translations.fr === testEventData.title_translations.fr &&
      retrievedEvent.description_translations.en === testEventData.description_translations.en

    if (translationsValid) {
      console.log('üéâ Test r√©ussi ! Les traductions sont correctement sauvegard√©es et r√©cup√©r√©es.')
    } else {
      console.log('‚ùå Test √©chou√© : Les donn√©es ne correspondent pas')
    }

    // 4. Nettoyer - Supprimer l'√©v√©nement de test
    console.log('üßπ Nettoyage...')
    const { error: deleteError } = await supabase
      .from('events')
      .delete()
      .eq('id', createdEvent.id)

    if (deleteError) {
      console.warn('‚ö†Ô∏è Impossible de supprimer l\'√©v√©nement de test:', deleteError)
    } else {
      console.log('‚úÖ √âv√©nement de test supprim√©')
    }

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error)
  }
}

// Ex√©cuter le test
testMultilingualFunctionality()